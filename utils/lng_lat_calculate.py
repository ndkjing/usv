"""
经纬度计算
"""
import math


# 度格式转度分格式
# def DDD2DMS(number):
#     D = number // 1
#     temp = number % 1
#     M = (temp * 60) // 1
#     temp = (temp * 60) % 1
#     S = (temp * 60)
#     return D + (M / 100) + (S / 10000)

# 度格式转度分格式
# def DDD2DMS(number):
#     D = number // 1
#     temp = number % 1
#     M = (temp * 60)
#     return D + (M / 100)

# 直接返回度格式数据
def DDD2DMS(number):
    return number

def angleFromCoordinate(long1, lat1, long2, lat2):
    """
    求两点的经纬度偏差角度 返回0-360,第一点为原点，第二点为目标点 以北为0度 逆时针为正方向
    :param long1: 第一点经度
    :param lat1: 第一点纬度
    :param long2: 第二点经度
    :param lat2: 第二点纬度
    :return: 角度 浮点数
    """
    lat1 = math.radians(DDD2DMS(lat1))
    lat2 = math.radians(DDD2DMS(lat2))
    long1 = math.radians(DDD2DMS(long1))
    long2 = math.radians(DDD2DMS(long2))
    y = math.sin(long2 - long1) * math.cos(lat2)
    x = math.cos(lat1) * math.sin(lat2) - math.sin(lat1) * \
        math.cos(lat2) * math.cos(long2 - long1)
    deltaLon = long2 - long1
    theta = math.atan2(y, x)
    theta = math.degrees(theta)
    # print('row_theta',theta,'y, x',y, x)
    if theta > 0:
        theta = 360 - theta
    else:
        theta = abs(theta)
    return theta


def distanceFromCoordinate(lon1, lat1, lon2, lat2):
    """
    # 两点经纬度求两点的距离单位，返回单位米
    on the earth (specified in decimal degrees)
    :param lon1: 第一点经度
    :param lat1: 第一点纬度
    :param lon2: 第二点经度
    :param lat2: 第二点纬度
    :return: 距离 单位米
    """
    # 将十进制度数转化为弧度
    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])
    # haversine公式
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * \
        math.cos(lat2) * math.sin(dlon / 2) ** 2
    c = 2 * math.asin(math.sqrt(a))
    r = 6371  # 地球平均半径，单位为公里
    return c * r * 1000


def one_point_diatance_to_end(lng, lat, brng, d):
    """
    已知一点的经纬度和移动方向与距离，求终点的经纬度
    :param lng:经度
    :param lat:纬度
    :param brng: 右手坐标系角度 北为0度 逆时针为正
    :param d:距离单位米
    :return:求得的目标点经纬度 [经度, 纬度]
    """
    R = 6378.1  # Radius of the Earth
    brng = 360 - brng
    brng = math.radians(brng)  # Bearing is 90 degrees converted to radians.
    d = d / 1000  # Distance in km

    # lat2  52.20444 - the lat result I'm hoping for
    # lon2  0.36056 - the long result I'm hoping for.

    lat1 = math.radians(lat)  # Current lat point converted to radians
    lon1 = math.radians(lng)  # Current long point converted to radians

    lat2 = math.asin(math.sin(lat1) * math.cos(d / R) +
                     math.cos(lat1) * math.sin(d / R) * math.cos(brng))

    lon2 = lon1 + math.atan2(math.sin(brng) * math.sin(d / R) * math.cos(lat1),
                             math.cos(d / R) - math.sin(lat1) * math.sin(lat2))

    lat2 = math.degrees(lat2)
    lon2 = math.degrees(lon2)
    return [round(lon2, 6), round(lat2, 6)]


def gps_gaode_to_gps(gps, gps_gaode, gaode):
    """
        一个GPS和一个高德经纬度，计算高德经纬度的实际经纬度
        :param gps:传入GPS
        :param gps_gaode:传入GPS对应的高德经纬度
        :param gaode: 目标点高德经纬度
        :return: 目标点真实经纬度
        """
    distance = distanceFromCoordinate(gps_gaode[0],
                                      gps_gaode[1],
                                      gaode[0],
                                      gaode[1])
    theta = angleFromCoordinate(gps_gaode[0],
                                gps_gaode[1],
                                gaode[0],
                                gaode[1])
    return one_point_diatance_to_end(gps[0],
                                     gps[1],
                                     theta,
                                     distance)


def get_x_y_distance(lon_lat0, lon_lat1):
    """
    计算两点之间的x和y轴距离
    :return:
    """
    distance = distanceFromCoordinate(lon_lat0[0], lon_lat0[0], lon_lat1[1], lon_lat1[1])
    theta = angleFromCoordinate(lon_lat0[0], lon_lat0[0], lon_lat1[1], lon_lat1[1])
    # NED 坐标系下距离
    theta = ((360 - theta) % 360 + 90) % 360
    x = distance * math.sin(theta)
    y = distance * math.cos(theta)
    return x, y


if __name__ == '__main__':
    distance_all=0
    list_l = [[114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384327, 30.484632], [114.384249, 30.48472], [114.383996, 30.484879], [114.383768, 30.485099], [114.383263, 30.48553], [114.383042, 30.485718], [114.382822, 30.48591], [114.382775, 30.486114], [114.382798, 30.486364], [114.382643, 30.48659], [114.382424, 30.486761], [114.382217, 30.486952], [114.38196, 30.487167], [114.381559, 30.487513], [114.381267, 30.487765], [114.381012, 30.487987], [114.380872, 30.4882], [114.380847, 30.488227], [114.380841, 30.48824], [114.380868, 30.488289], [114.380967, 30.488229], [114.381194, 30.488226], [114.381506, 30.488229], [114.381798, 30.48823], [114.382373, 30.48823], [114.382373, 30.48823], [114.38268, 30.488231], [114.38299, 30.48823], [114.383354, 30.48823], [114.383666, 30.48823], [114.383913, 30.48823], [114.384225, 30.488231], [114.384537, 30.488231], [114.384849, 30.488231], [114.385213, 30.488231], [114.385458, 30.488231], [114.385458, 30.488231], [114.38577, 30.488231], [114.386082, 30.488231], [114.386706, 30.488231], [114.387002, 30.488231], [114.387002, 30.488231], [114.387262, 30.488231], [114.387574, 30.488231], [114.388198, 30.488231], [114.388507, 30.488231], [114.388547, 30.488231], [114.388807, 30.488231], [114.389067, 30.488231], [114.389691, 30.488231], [114.390003, 30.488231], [114.390091, 30.488231], [114.39013, 30.488203], [114.390042, 30.488069], [114.390082, 30.48787], [114.390081, 30.48763], [114.390083, 30.487156], [114.390096, 30.486908], [114.390096, 30.486908], [114.390004, 30.48686], [114.389726, 30.486922], [114.389388, 30.486889], [114.389086, 30.486906], [114.388728, 30.486897], [114.388422, 30.486902], [114.388059, 30.486899], [114.387747, 30.486899], [114.387383, 30.486899], [114.387071, 30.486899], [114.387027, 30.486899], [114.386819, 30.4869], [114.386195, 30.4869], [114.385883, 30.4869], [114.38552, 30.4869], [114.385271, 30.4869], [114.384855, 30.4869], [114.384595, 30.4869], [114.384231, 30.4869], [114.383934, 30.4869], [114.383934, 30.4869], [114.383622, 30.4869], [114.382946, 30.4869], [114.382582, 30.4869], [114.382389, 30.4869], [114.382337, 30.4869], [114.382025, 30.4869], [114.381401, 30.4869], [114.381089, 30.4869], [114.380845, 30.4869], [114.380793, 30.4869], [114.380169, 30.4869], [114.379857, 30.4869], [114.379493, 30.4869], [114.379301, 30.4869], [114.379263, 30.486883], [114.379235, 30.486696], [114.379052, 30.486571], [114.378691, 30.486248], [114.378506, 30.486102], [114.378, 30.48566], [114.377757, 30.485571], [114.377757, 30.485571], [114.377736, 30.485513], [114.377823, 30.48552], [114.377957, 30.485606], [114.378255, 30.485553], [114.37855, 30.485577], [114.378853, 30.485566], [114.37921, 30.485571], [114.379335, 30.485569], [114.379696, 30.485574], [114.380007, 30.485577], [114.38037, 30.485583], [114.38068, 30.485583], [114.380914, 30.485573], [114.381215, 30.485589], [114.381573, 30.485577], [114.381883, 30.485576], [114.382245, 30.485571], [114.382373, 30.48557], [114.382477, 30.48557], [114.382841, 30.48557], [114.383205, 30.48557], [114.383569, 30.48557], [114.383915, 30.48557], [114.384071, 30.48557], [114.384435, 30.48557], [114.384799, 30.48557], [114.385111, 30.48557], [114.385443, 30.48557], [114.385458, 30.48557], [114.386082, 30.48557], [114.386394, 30.48557], [114.386758, 30.48557], [114.387002, 30.48557], [114.387314, 30.48557], [114.387626, 30.48557], [114.387938, 30.48557], [114.388302, 30.48557], [114.388546, 30.48557], [114.388546, 30.48557], [114.388858, 30.48557], [114.389222, 30.48557], [114.389586, 30.48557], [114.390091, 30.48557], [114.39012, 30.485555], [114.390078, 30.485455], [114.390068, 30.485246], [114.390077, 30.484669], [114.390081, 30.484364], [114.390096, 30.484247], [114.390086, 30.484219], [114.38998, 30.484248], [114.389757, 30.484271], [114.389538, 30.484241], [114.388939, 30.484253], [114.388562, 30.484243], [114.388429, 30.48424], [114.388135, 30.484266], [114.387831, 30.484253], [114.387473, 30.484259], [114.387215, 30.484256], [114.387023, 30.484242], [114.38663, 30.484261], [114.386376, 30.484256], [114.38576, 30.484257], [114.38549, 30.484245], [114.385476, 30.484242], [114.38519, 30.484257], [114.384838, 30.484257], [114.38453, 30.484256], [114.384169, 30.484257], [114.383933, 30.484242], [114.383593, 30.484261], [114.38334, 30.484258], [114.383033, 30.484256], [114.382401, 30.484243], [114.382387, 30.484241], [114.382145, 30.484254], [114.381793, 30.484258], [114.381125, 30.484258], [114.380878, 30.484245], [114.380843, 30.484241], [114.380703, 30.484244], [114.380403, 30.484263], [114.380096, 30.484254], [114.379479, 30.484256], [114.379299, 30.484241], [114.379256, 30.48424], [114.378958, 30.484261], [114.378654, 30.484256], [114.378295, 30.484258], [114.378037, 30.484258], [114.37779, 30.484245], [114.377705, 30.48415], [114.377772, 30.48394], [114.377738, 30.483736], [114.377746, 30.483175], [114.377746, 30.482932], [114.377747, 30.482919], [114.377838, 30.482884], [114.378092, 30.482957], [114.378316, 30.482909], [114.378859, 30.482926], [114.379111, 30.482921], [114.379366, 30.482914], [114.379669, 30.48293], [114.379925, 30.482926], [114.380233, 30.482925], [114.380492, 30.482927], [114.380791, 30.482914], [114.380827, 30.482909], [114.381019, 30.482918], [114.381677, 30.482924], [114.381986, 30.482927], [114.382293, 30.482918], [114.382371, 30.48291], [114.382511, 30.482913], [114.383068, 30.482924], [114.383325, 30.482926], [114.383686, 30.482927], [114.383916, 30.48291], [114.384107, 30.482917], [114.384407, 30.482931], [114.384766, 30.482924], [114.385075, 30.482927], [114.385425, 30.482914], [114.38546, 30.48291], [114.385651, 30.482917], [114.385951, 30.482931], [114.386619, 30.482927], [114.386926, 30.482918], [114.387004, 30.48291], [114.387245, 30.482923], [114.387593, 30.482926], [114.387951, 30.482925], [114.388259, 30.482927], [114.388533, 30.482913], [114.388561, 30.482844], [114.388425, 30.482856], [114.388118, 30.482554], [114.387897, 30.482387], [114.387691, 30.482193], [114.387468, 30.48201], [114.387178, 30.481756], [114.387017, 30.481592], [114.386792, 30.481588], [114.386522, 30.481606], [114.38623, 30.481589], [114.385977, 30.481601], [114.38548, 30.48158], [114.385437, 30.48158], [114.385139, 30.4816], [114.384833, 30.481595], [114.384164, 30.481597], [114.383932, 30.481579], [114.38389, 30.481578], [114.383544, 30.481602], [114.383238, 30.481594], [114.38257, 30.481595], [114.382388, 30.481579], [114.382345, 30.481578], [114.381692, 30.481594], [114.381333, 30.481597], [114.380974, 30.481592], [114.380843, 30.481579], [114.380705, 30.481582], [114.380354, 30.481601], [114.380047, 30.481593], [114.379481, 30.481595], [114.379299, 30.481579], [114.37896, 30.4816], [114.378605, 30.481593], [114.378296, 30.481595], [114.377987, 30.481596], [114.377755, 30.481579], [114.377755, 30.481579], [114.377741, 30.481513], [114.378047, 30.481469], [114.37825, 30.481277], [114.378551, 30.481168], [114.379072, 30.480971], [114.379285, 30.480892], [114.379533, 30.48077], [114.379863, 30.480767], [114.380176, 30.480732], [114.380623, 30.480342], [114.380823, 30.480256], [114.380862, 30.480244], [114.381146, 30.480247], [114.381443, 30.480247], [114.381799, 30.480246], [114.382106, 30.480246], [114.382363, 30.480245], [114.382675, 30.480249], [114.382987, 30.480254], [114.383559, 30.480261], [114.383865, 30.480254], [114.383909, 30.480249], [114.384101, 30.480256], [114.384454, 30.480268], [114.384659, 30.480262], [114.385328, 30.480261], [114.385459, 30.480248], [114.385501, 30.480247], [114.386154, 30.480263], [114.386462, 30.480266], [114.386772, 30.480266], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248], [114.387004, 30.480248]]
    for index,item in enumerate(list_l[1:]):
        # print('index',index)
        distance = distanceFromCoordinate(list_l[index][0],list_l[index][1],item[0],item[1])
        distance_all+=distance
    print('distance_all',distance_all)
    theta = angleFromCoordinate(114.435546, 30.539298, 114.425546, 30.539298)
    print('theta1 :', theta)
    print('diatance1 :', distanceFromCoordinate(114.435546, 30.539298, 114.425546, 30.539298))
    theta = angleFromCoordinate(114.433546, 30.539298, 114.432546, 30.541674)
    print('theta1 0:!==', theta)
    theta = angleFromCoordinate(114.435546, 30.539298, 114.335546, 30.639298)
    print('theta1 0:!==', theta)
    theta = angleFromCoordinate(114.435546, 30.539298, 114.435546, 30.529298)
    print('theta0 1:', theta)
    theta = angleFromCoordinate(114.435546, 30.539298, 114.445546, 30.539298)
    print('theta-1 1:', theta)
    theta = angleFromCoordinate(114.435546, 30.539298, 114.348369, 30.464598)
    print('theta-1 0:', theta)
    theta = angleFromCoordinate(114.435546, 30.539298, 114.348369, 30.464498)
    print('theta-1 -1:', theta)
    print('diatance2:', distanceFromCoordinate(114.435546, 30.539298, 114.348369, 30.464498))

    theta = angleFromCoordinate(114.435546, 30.539298, 114.348469, 30.4644988)
    print('theta0 -1:', theta)
    theta = angleFromCoordinate(114.435546, 30.539298, 114.535546, 30.639298)
    print('theta1 -1:', theta)
    print('diatance3 :', distanceFromCoordinate(114.435546, 30.539298, 114.535546, 30.639298))

    # 30.505588, 114.524145
    # 30.505588,114.528145
    distance = distanceFromCoordinate(114.504145, 30.501588, 114.528145, 30.505588)
    print('distance', distance)
    temp = one_point_diatance_to_end(114.316966, 30.576768, 90, 1)
    print(temp)
    # current 114.432112, 30.522414 target 114.432112, 30.522414